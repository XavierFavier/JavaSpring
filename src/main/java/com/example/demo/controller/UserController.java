package com.example.demo.controller;

import com.example.demo.dao.JbdcDao;
import com.example.demo.dao.Users;
import com.example.demo.dao.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
public class UserController {
    //DAO
    //private MySQLUserDAO myDAO = new MySQLUserDAO();
    private JbdcDao myDAO = new JbdcDao();

//    @GetMapping("/allUsers")
//    public List<User> getAllUsers() {
//        return myDAO.getAllUsers();
//    }
//
//    @GetMapping("/user")
//    public User getUserById(@RequestParam UUID id) {
//        return myDAO.getUserById(id.toString());
//    }
//
//    @PostMapping("/user")
//    public String addUser(@RequestParam("name") String name) {
//        String id = UUID.randomUUID().toString();
//        myDAO.addUser(id, name);
//        return id;
//    }
//
//    @PutMapping("/user")
//    public void updateUser(@RequestParam String id,
//                           @RequestParam String newID, @RequestParam String newName) {
//
//        myDAO.updateUser(id, newID, newName);
//    }
//
//    @DeleteMapping("/user")
//    public void deleteUser(@RequestParam UUID id) {
//        myDAO.deleteUser(id.toString());
//    }

    //3. JPA
    //
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/user") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Users n = new Users();
        n.setName(name);
        n.setUuid(UUID.randomUUID().toString());

        userRepository.save(n);

        return n.getUuid();
    }

    @GetMapping(path="/allUsers")
    public @ResponseBody Iterable<Users> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
